version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SERVER_URL=http://116.203.198.150:5000
    depends_on:
      - backend
    restart: always
    networks:
      - yachts-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - SECRET_KEY=gfgd@43435sdfggpp[[gdsf
      - NODE_ENV=production
      - DATABASE_HOST=db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=Yachts2024!Secure#DB
      - DATABASE_NAME=yachts
      - DATABASE_PORT=5432
      - SERVER_URL=http://116.203.198.150:5000
      - CLIENT_URL=http://116.203.198.150:3000
      - ZOHO_APP_PASSWORD=fV3U2ZA#u4:6$Gg
      - ZOHO_EMAIL=kirill.hetman@zohomail.eu
    depends_on:
      db:
        condition: service_healthy
    restart: always
    volumes:
      - uploads_data:/app/uploads
    networks:
      - yachts-network
    command: >
      sh -c "mkdir -p /app/uploads/image /app/uploads/video /app/uploads/logo &&
             chmod -R 777 /app/uploads &&
             npm run start"

  db:
    image: postgres:15
    restart: always
    # Убираем внешний доступ к БД - только внутренний доступ
    # ports:
    #   - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Yachts2024!Secure#DB
      POSTGRES_DB: yachts
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    # Добавляем лимиты ресурсов чтобы избежать крашей
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: docker-entrypoint.sh postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d yachts"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - yachts-network

networks:
  yachts-network:
    driver: bridge

volumes:
  postgres_data:
  uploads_data: